import void trace "imports" "trace" (u32);

// Global memory for all virtual machines
u8[0x100_0000] globalMem;

// --- CPU globals
global u32 tacts;
global u32 clock = 3_500_000;

// Represents a 16-bit register pair
type r16 = struct {
  u8 l, // LSB register
  u8 h  // MSB register
};

// --- Z80 Registers
r16 af;
u16 afR { af };
r16 bc;
r16 de;
r16 hl;
u16 af_;
u16 bc_;
u16 de_;
u16 hl_;

table *i32 tableA(u8 b, f64 c) { ddd, ddd, ddd };
table *i32 tableB(u8 b, f64 c) { ddd, ddd, ddd };

export void reset() {
  // TODO: Implement it
}

inline i32 setA(u8 value) {
  af.h = value;
  return 0;
}

inline i32 setF(u8 value) {
  af.l = value;
  return 0;
}

inline i32 called(u32 value) {
  setA(value);
  setF(value);
  tableA(1, 1.1)[2];
  tableB(2, 2.1)[value];
  return 123;
}

*i32 ddd(u8 a, f64 b) {
  return 0;
}

void test() {
  local i32 a;
  do {
    a += 1;
    break;
  } while (a < 4);
}
